/* ============================================================================================ */
/* =====    PROJECT HealthCare

/* ============================================================================================ */
/*

	Project:    HealthCare
	Company:    HealthCare.com
	Version:    1.0
	Author:     UI/UX Design/Dev Team :)



// ****************************************************
//
//   IMPORTS
//
//   -> Compass Framework
//		- Main framework. All the magic happens here.
//
//   -> Core
//		- Main styles. Core content.
//
//   -> Helpers
//		- Collection of custom SASS Functions, Mixins, placeholders, extends and helper classes.
//
//   -> Modules
//		- Every modular/reusable element has its styles defined here.
//
//   -> Shame CSS
//		- Yeah, we should be ashamed of this. MUST fix these in the near future.
//
//
// ****************************************************

*/
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
@-moz-keyframes stackBar {
  0% {
    height: 0;
    opacity: 0;
  }
  60% {
    height: 70px;
  }
  80% {
    height: 50;
    opacity: 1;
  }
  100% {
    height: 60px;
  }
}
@-webkit-keyframes stackBar {
  0% {
    height: 0;
    opacity: 0;
  }
  60% {
    height: 70px;
  }
  80% {
    height: 50;
    opacity: 1;
  }
  100% {
    height: 60px;
  }
}
@keyframes stackBar {
  0% {
    height: 0;
    opacity: 0;
  }
  60% {
    height: 70px;
  }
  80% {
    height: 50;
    opacity: 1;
  }
  100% {
    height: 60px;
  }
}
@-moz-keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@-webkit-keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
/* line 38, core/_typography.scss */
html, button {
  -webkit-font-smoothing: antialiased;
}

/* line 22, core/_base.scss */
*,
*:before,
*:after {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

/* line 29, core/_base.scss */
* {
  margin: 0;
  padding: 0;
  text-decoration: none;
  font-family: 'Titillium Web', sans-serif;
}

/* line 30, core/_base.scss */
li {
  list-style: none;
}

/* line 32, core/_base.scss */
:focus {
  outline: none;
}

/* line 34, core/_base.scss */
a {
  text-decoration: none;
  outline: none;
  color: #F3F3F3;
}
/* line 38, core/_base.scss */
a:visited {
  text-decoration: none;
}
/* line 39, core/_base.scss */
a:link {
  text-decoration: none;
}
/* line 40, core/_base.scss */
a:hover {
  outline: none;
}
/* line 41, core/_base.scss */
a:active {
  outline: none;
}
/* line 42, core/_base.scss */
a:focus {
  outline: none;
}

/* line 45, core/_base.scss */
html, body {
  width: 100%;
  height: 100%;
}

/* line 47, core/_base.scss */
body {
  font: 400 toem(16px) Arial, "Helvetica Neue", Helvetica, sans-serif;
  background-color: #fff;
  color: #000;
}

/* line 49, core/_base.scss */
img {
  display: block;
  max-width: 100%;
  height: auto;
  outline: 0;
}

/* line 51, core/_base.scss */
strong {
  font-weight: 700;
}

/* line 52, core/_base.scss */
fieldset {
  border: none;
  padding: 0;
  margin: 0;
}

/* line 53, core/_base.scss */
blockquote {
  margin: 0;
}

/* line 57, core/_base.scss */
menu ul,
menu li,
nav ul,
nav li {
  margin: 0;
  padding: 0;
}

/* line 61, core/_base.scss */
hr {
  width: 100%;
  height: 20px;
  margin: 0 0 20px;
  border: none;
  border-bottom: 1px dashed #d7d6cf;
}

/* line 64, core/_base.scss */
button:focus {
  outline: none;
}

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/* line 38, core/_typography.scss */
html, button {
  -webkit-font-smoothing: antialiased;
}

/* line 18, views/_header.scss */
.header {
  background: url(../img/banner.jpg);
  height: 150px;
  position: relative;
}
/* line 20, views/_header.scss */
.header h1 {
  color: #FDCA2E;
  padding: 20px 0 0 50px;
  filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=80);
  opacity: 0.8;
  font-family: 'Indie Flower', cursive;
}
/* line 21, views/_header.scss */
.header .img-logo {
  content: url(../img/logo-principal.png);
  right: 30px;
  width: 140px;
  position: absolute;
  top: 30px;
}
/* line 22, views/_header.scss */
.header .nav-bar {
  list-style-type: none;
  position: absolute;
  bottom: 0;
  text-transform: uppercase;
}
/* line 25, views/_header.scss */
.header .nav-bar li {
  float: left;
  margin-left: 30px;
}
/* line 27, views/_header.scss */
.header .nav-bar li a {
  display: block;
  color: #EAEAEA;
  padding: 15px 20px;
  position: relative;
  box-shadow: 0px -10px 7px -7px rgba(253, 202, 46, 0) inset;
  -moz-transition: all 0.3s ease-in 0.1s;
  -o-transition: all 0.3s ease-in 0.1s;
  -webkit-transition: all 0.3s ease-in;
  -webkit-transition-delay: 0.1s;
  transition: all 0.3s ease-in 0.1s;
}
/* line 30, views/_header.scss */
.header .nav-bar li a:before {
  -moz-transition: all 0.3s ease-in;
  -o-transition: all 0.3s ease-in;
  -webkit-transition: all 0.3s ease-in;
  transition: all 0.3s ease-in;
  content: "";
  display: block;
  position: absolute;
  left: 50%;
  bottom: 0;
  height: 2px;
  width: 0;
  background: #FDCA2E;
}
/* line 36, views/_header.scss */
.header .nav-bar li a:hover {
  color: #FDCA2E;
  box-shadow: 0px -10px 7px -7px #FDCA2E inset;
}
/* line 38, views/_header.scss */
.header .nav-bar li a:hover:before {
  width: 100%;
  left: 0;
  color: #FDCA2E;
}
/* line 43, views/_header.scss */
.header .nav-bar li a.active {
  color: #FDCA2E;
  font-weight: 600;
  box-shadow: 0px -10px 7px -7px #FDCA2E inset;
}
/* line 45, views/_header.scss */
.header .nav-bar li a.active:before {
  width: 100%;
  left: 0;
  color: #FDCA2E;
}
/* line 51, views/_header.scss */
.header .nav-bar.stack-nav-bar {
  -moz-animation: stackBar 0.4s linear;
  -webkit-animation: stackBar 0.4s linear;
  animation: stackBar 0.4s linear;
  position: fixed;
  top: 0;
  background: rgba(0, 0, 0, 0.8);
  width: 100%;
  height: 54px;
  z-index: 9;
}
/* line 52, views/_header.scss */
.header .nav-bar.stack-nav-bar li {
  filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=0);
  opacity: 0;
}
/* line 56, views/_header.scss */
.header .nav-bar.stack-nav-bar li:nth-child(1) {
  -moz-animation: fadeIn 0.3s linear 0.5s forwards;
  -webkit-animation: fadeIn 0.3s linear 0.5s forwards;
  animation: fadeIn 0.3s linear 0.5s forwards;
}
/* line 56, views/_header.scss */
.header .nav-bar.stack-nav-bar li:nth-child(2) {
  -moz-animation: fadeIn 0.3s linear 0.6s forwards;
  -webkit-animation: fadeIn 0.3s linear 0.6s forwards;
  animation: fadeIn 0.3s linear 0.6s forwards;
}
/* line 56, views/_header.scss */
.header .nav-bar.stack-nav-bar li:nth-child(3) {
  -moz-animation: fadeIn 0.3s linear 0.7s forwards;
  -webkit-animation: fadeIn 0.3s linear 0.7s forwards;
  animation: fadeIn 0.3s linear 0.7s forwards;
}
/* line 56, views/_header.scss */
.header .nav-bar.stack-nav-bar li:nth-child(4) {
  -moz-animation: fadeIn 0.3s linear 0.8s forwards;
  -webkit-animation: fadeIn 0.3s linear 0.8s forwards;
  animation: fadeIn 0.3s linear 0.8s forwards;
}
/* line 64, views/_header.scss */
.header .block-right {
  width: 30%;
  background: #E2E0D7;
  position: absolute;
  right: 10%;
  top: 130px;
  z-index: 3;
  -moz-box-shadow: rgba(0, 0, 0, 0.53) 3px 3px 15px;
  -webkit-box-shadow: rgba(0, 0, 0, 0.53) 3px 3px 15px;
  box-shadow: rgba(0, 0, 0, 0.53) 3px 3px 15px;
  height: 366px;
}
/* line 67, views/_header.scss */
.header .block-right .content-aside {
  padding: 40px;
}
/* line 70, views/_header.scss */
.header .block-right .content-aside .title-aside {
  text-transform: uppercase;
  text-align: center;
  font-size: 1.25em;
  margin-bottom: 40px;
}
/* line 73, views/_header.scss */
.header .triangulo-bottom-right {
  width: 0;
  height: 0;
  border-bottom: 20px solid #B1AFA5;
  border-left: 10px solid transparent;
  position: absolute;
  right: 100%;
}
/* line 74, views/_header.scss */
.header .line-div {
  background: url(../img/line.png);
  height: 10px;
  width: 100%;
  position: absolute;
  bottom: -10px;
}

/* line 19, views/_content.scss */
h1.centered-title {
  text-align: center;
  margin: 80px 0;
  font-size: 40px;
  color: #949494;
  text-shadow: black 1px 1px, #737070 2px 0px;
  text-transform: uppercase;
}
/* line 22, views/_content.scss */
h1.centered-title:before {
  content: "";
  border: 1px solid;
  position: absolute;
  width: 25%;
  left: 10%;
  margin-top: 32px;
  -moz-box-shadow: #3A3A3A 1px 1px 1px, #737070 2px 0px;
  -webkit-box-shadow: #3A3A3A 1px 1px 1px, #737070 2px 0px;
  box-shadow: #3A3A3A 1px 1px 1px, #737070 2px 0px;
  text-transform: uppercase;
}
/* line 23, views/_content.scss */
h1.centered-title:after {
  content: "";
  border: 1px solid;
  position: absolute;
  width: 25%;
  right: 10%;
  margin-top: 32px;
  -moz-box-shadow: #3A3A3A 1px 1px 1px, #737070 2px 0px;
  -webkit-box-shadow: #3A3A3A 1px 1px 1px, #737070 2px 0px;
  box-shadow: #3A3A3A 1px 1px 1px, #737070 2px 0px;
  text-transform: uppercase;
}

/* line 26, views/_content.scss */
body {
  background: #EBEBE8;
}

/* line 27, views/_content.scss */
main {
  height: 100%;
}

/* line 28, views/_content.scss */
.main-section--home {
  width: 80%;
  margin: 0 auto;
}
/* line 31, views/_content.scss */
.main-section--home .content-carousel {
  position: relative;
  width: 620px;
}
/* line 33, views/_content.scss */
.main-section--home .content-carousel .carousel {
  background: #797979;
  overflow: hidden;
}
/* line 35, views/_content.scss */
.main-section--home .content-carousel .carousel .mask {
  width: calc(100% * 3.1);
}
/* line 38, views/_content.scss */
.main-section--home .content-carousel .carousel .mask.img0-selected div {
  -moz-transform: translate3d(0, 0, 0);
  -webkit-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0);
}
/* line 41, views/_content.scss */
.main-section--home .content-carousel .carousel .mask.img1-selected div {
  -moz-transform: translate3d(-100%, 0, 0);
  -webkit-transform: translate3d(-100%, 0, 0);
  transform: translate3d(-100%, 0, 0);
}
/* line 44, views/_content.scss */
.main-section--home .content-carousel .carousel .mask.img2-selected div {
  -moz-transform: translate3d(-200%, 0, 0);
  -webkit-transform: translate3d(-200%, 0, 0);
  transform: translate3d(-200%, 0, 0);
}
/* line 46, views/_content.scss */
.main-section--home .content-carousel .carousel .mask div {
  width: 620px;
  height: 300px;
  display: inline-block;
  background-size: cover;
  -moz-transition: all, ease-in 0.4s;
  -o-transition: all, ease-in 0.4s;
  -webkit-transition: all, ease-in 0.4s;
  transition: all, ease-in 0.4s;
  margin-right: -7px;
}
/* line 49, views/_content.scss */
.main-section--home .content-carousel .carousel .mask div.img1 {
  background: url(../img/img-1.jpg);
  background-size: cover;
  background-repeat: no-repeat;
}
/* line 50, views/_content.scss */
.main-section--home .content-carousel .carousel .mask div.img2 {
  background: url(../img/img-1.jpg);
  background-size: cover;
  background-repeat: no-repeat;
}
/* line 51, views/_content.scss */
.main-section--home .content-carousel .carousel .mask div.img3 {
  background: url(../img/img-1.jpg);
  background-size: cover;
  background-repeat: no-repeat;
}
/* line 55, views/_content.scss */
.main-section--home .content-carousel .controllers {
  position: absolute;
  right: -20px;
  top: calc(50% - 20px);
}
/* line 57, views/_content.scss */
.main-section--home .content-carousel .controllers .prev, .main-section--home .content-carousel .controllers .next {
  width: 30px;
  height: 30px;
  background: #4A4A4A;
  border: 1px solid #404040;
  color: #B7B7B7;
  text-align: center;
  font-weight: bold;
  display: table;
  -moz-transition: all 0.2s ease-in;
  -o-transition: all 0.2s ease-in;
  -webkit-transition: all 0.2s ease-in;
  transition: all 0.2s ease-in;
}
/* line 61, views/_content.scss */
.main-section--home .content-carousel .controllers .prev:hover, .main-section--home .content-carousel .controllers .next:hover {
  background: #888686;
  cursor: pointer;
  -moz-transform: scale3d(1.03 1.03 1.03, 1.25, 1.25);
  -webkit-transform: scale3d(1.03 1.03 1.03, 1.25, 1.25);
  transform: scale3d(1.03 1.03 1.03, 1.25, 1.25);
  background: #fdca2e;
  color: #000000;
}
/* line 62, views/_content.scss */
.main-section--home .content-carousel .controllers .prev:before, .main-section--home .content-carousel .controllers .next:before {
  display: table-cell;
  vertical-align: middle;
}

/* line 68, views/_content.scss */
.triangulo-top {
  width: 0;
  height: 0;
  border-bottom: 5px solid #000000;
  border-right: 20px solid transparent;
  position: absolute;
  left: 30%;
  top: -5px;
}

/* line 72, views/_content.scss */
.list-products {
  overflow: auto;
  margin-bottom: 30px;
}
/* line 74, views/_content.scss */
.list-products .product-element {
  background-size: cover;
  background-repeat: no-repeat;
  position: relative;
  -moz-box-shadow: black 3px 3px 10px;
  -webkit-box-shadow: black 3px 3px 10px;
  box-shadow: black 3px 3px 10px;
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 31.33333%;
  margin-left: 0%;
  margin-right: 3%;
  margin-bottom: 3%;
  cursor: pointer;
  overflow: hidden;
}
/* line 344, libs/jeet/_grid.scss */
.list-products .product-element:before, .list-products .product-element:after {
  content: '';
  display: table;
}
/* line 349, libs/jeet/_grid.scss */
.list-products .product-element:after {
  clear: both;
}
/* line 50, libs/jeet/_grid.scss */
.list-products .product-element:nth-child(3n) {
  margin-right: 0%;
  float: right;
}
/* line 54, libs/jeet/_grid.scss */
.list-products .product-element:nth-child(3n + 1) {
  clear: both;
}
/* line 78, views/_content.scss */
.list-products .product-element img {
  -moz-transition: all 0.3s ease-out;
  -o-transition: all 0.3s ease-out;
  -webkit-transition: all 0.3s ease-out;
  transition: all 0.3s ease-out;
  width: 103%;
}
/* line 79, views/_content.scss */
.list-products .product-element .hover-element {
  width: 100%;
  height: 100%;
  background: rgba(253, 202, 46, 0.24);
  position: absolute;
  top: 0;
  opacity: 0;
  -moz-transition: all 0.3s ease-out;
  -o-transition: all 0.3s ease-out;
  -webkit-transition: all 0.3s ease-out;
  transition: all 0.3s ease-out;
}
/* line 82, views/_content.scss */
.list-products .product-element .hover-element .img-buy {
  height: 100%;
  background-size: 20%;
  background-repeat: no-repeat;
  background-position: center center;
  background-position: center center;
  background-image: url(../img/icono-carrito-tititnins.png);
}
/* line 88, views/_content.scss */
.list-products .product-element:hover .hover-element {
  opacity: 1;
}
/* line 89, views/_content.scss */
.list-products .product-element:hover img {
  -moz-transform: scale3d(1.05, 1.05, 1.05);
  -webkit-transform: scale3d(1.05, 1.05, 1.05);
  transform: scale3d(1.05, 1.05, 1.05);
}

/* line 95, views/_content.scss */
.list-products .product-element.most-important {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 23.5%;
  margin-left: 0%;
  margin-right: 2%;
}
/* line 344, libs/jeet/_grid.scss */
.list-products .product-element.most-important:before, .list-products .product-element.most-important:after {
  content: '';
  display: table;
}
/* line 349, libs/jeet/_grid.scss */
.list-products .product-element.most-important:after {
  clear: both;
}
/* line 50, libs/jeet/_grid.scss */
.list-products .product-element.most-important:nth-child(4n) {
  margin-right: 0%;
  float: right;
}
/* line 54, libs/jeet/_grid.scss */
.list-products .product-element.most-important:nth-child(4n + 1) {
  clear: both;
}

/* line 102, views/_content.scss */
.block-text {
  width: 60%;
  margin: 5%;
}
/* line 104, views/_content.scss */
.block-text .title-company-section {
  font-size: 1.875em;
  text-transform: uppercase;
  margin-bottom: 30px;
}
/* line 105, views/_content.scss */
.block-text .text-company {
  line-height: 2;
}

/* line 113, views/_content.scss */
body.products .block-right .content-aside {
  padding: 30px;
}
/* line 115, views/_content.scss */
body.products .block-right .content-aside .title-aside {
  margin: 0;
  font-size: 0.9375em;
}
/* line 116, views/_content.scss */
body.products .block-right .content-aside p {
  display: none;
}

/* line 136, views/_content.scss */
.content-section {
  overflow: auto;
  margin: 2.5em 0;
}
/* line 138, views/_content.scss */
.content-section:nth-child(even) {
  background: #E2E0D7;
  box-shadow: 0px 0px 10px black;
}
/* line 139, views/_content.scss */
.content-section:nth-child(1) {
  height: 100%;
}

/* line 142, views/_content.scss */
.arrow-down {
  font-size: 60px;
  text-align: center;
  position: absolute;
  bottom: 5%;
  right: 50%;
}
/* line 144, views/_content.scss */
.arrow-down span {
  border: 2px solid black;
  border-radius: 50px;
  cursor: pointer;
  text-shadow: 1px 2px 4px #565656;
}

/* line 19, views/_footer.scss */
footer {
  background: url(../img/bg-footer-noise.jpg);
  width: 100%;
  color: #F3F3F3;
}
/* line 21, views/_footer.scss */
footer div {
  height: 100%;
  overflow: auto;
}
/* line 22, views/_footer.scss */
footer .sections--footer {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 20%;
  margin-left: 0%;
  margin-right: 0%;
}
/* line 344, libs/jeet/_grid.scss */
footer .sections--footer:before, footer .sections--footer:after {
  content: '';
  display: table;
}
/* line 349, libs/jeet/_grid.scss */
footer .sections--footer:after {
  clear: both;
}
/* line 24, views/_footer.scss */
footer .sections--footer li {
  margin-bottom: 5px;
  color: #D8D8D8;
}
/* line 25, views/_footer.scss */
footer .sections--footer li:hover {
  font-weight: 700;
}
/* line 28, views/_footer.scss */
footer .sections--footer li a {
  color: #D8D8D8;
}
/* line 31, views/_footer.scss */
footer .general-information--footer {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 33.33333%;
  margin-left: 0%;
  margin-right: 0%;
}
/* line 344, libs/jeet/_grid.scss */
footer .general-information--footer:before, footer .general-information--footer:after {
  content: '';
  display: table;
}
/* line 349, libs/jeet/_grid.scss */
footer .general-information--footer:after {
  clear: both;
}
/* line 32, views/_footer.scss */
footer .social-net--footer {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 46.66667%;
  margin-left: 0%;
  margin-right: 0%;
}
/* line 344, libs/jeet/_grid.scss */
footer .social-net--footer:before, footer .social-net--footer:after {
  content: '';
  display: table;
}
/* line 349, libs/jeet/_grid.scss */
footer .social-net--footer:after {
  clear: both;
}
/* line 33, views/_footer.scss */
footer .block-footer {
  padding: 20px;
}
/* line 34, views/_footer.scss */
footer h3 {
  margin-bottom: 10px;
  font-family: 'Quicksand', sans-serif;
  ext-transform: uppercase;
  font-weight: 600;
}
/* line 35, views/_footer.scss */
footer .line-div {
  background: url(../img/line.png);
  height: 10px;
  width: 100%;
}

/* line 20, modules/_button.scss */
.button {
  background-color: gray;
  border: none;
  -webkit-appearance: none;
  font: 400 1em Arial, "Helvetica Neue", Helvetica, sans-serif;
  font-weight: 700;
  font-size: 0.9375em;
  line-height: 2.5rem;
  text-align: center !important;
  text-decoration: none;
  color: #fff;
  height: 2.5rem;
  display: inline-block;
  padding: 0 30px;
  min-width: 2.5rem;
  -moz-border-radius: 0.4375em;
  -webkit-border-radius: 0.4375em;
  border-radius: 0.4375em;
  -moz-transition: all 0.2s ease;
  -o-transition: all 0.2s ease;
  -webkit-transition: all 0.2s ease;
  transition: all 0.2s ease;
}

/* line 21, modules/_icons.scss */
[class^="icon-"]:before,
[class*=" icon-"]:before {
  text-decoration: none;
  font-weight: 400;
}
